
///////////////////////////////////////////////////////////////////////////////////////////////////////
// T H E   O L D   U P L O A D S   S E C T I O N
///////////////////////////////////////////////////////////////////////////////////////////////////////

// Create storage engine
const storage = new GridFSStorage({
    url: databaseUrl,
    file: (req, file) => {
        return new Promise((resolve, reject) => {
            crypto.randomBytes(16, (err, buf) => {
                if (err) {
                    return reject(err);
                }
                const filename = buf.toString('hex') + path.extname(file.originalname);
                const fileInfo = {
                    filename: filename,
                    metadata: {
                        customer: (req.body.customername) ? req.body.customername : null,
                        diagram: (req.body.diagram) ? req.body.diagram : null,
                        originalname: (file) ? file.originalname : null
                    },
                    bucketName: 'uploads'
                };
                resolve(fileInfo);
            });
        });
    }
});
const upload = multer({
    storage: storage,
    limits: {
        fileSize: 2097152 // 2 MB
    }
});

var gfs;
db.once("open", function () {
    gfs = gridfs_stream(db.db, mongoose.mongo);
    gfs.collection('uploads');
});



// // @route GET /uploads
// // @desc Gets all uploaded files
// app.get('/uploads', authenticate_session, (req, res) => {
//     gfs.files.find().toArray((err, files) => {
//         // Check if files
//         if (!files || files.length === 0) {
//             res.json([]);
//         } else {
//             // files.map(file => {
//             //     if (file.contentType === 'image/jpeg' || file.contentType === 'image/png') {
//             //         file.isImage = true;
//             //     } else {
//             //         file.isImage = false;
//             //     }
//             // });
//             //console.log(files);
//             res.json(files);
//         }
//     });
// });

// // @route GET /uploads/:id
// // @desc Gets all uploaded files for a given customer
// app.get('/uploads/:id', authenticate_session, (req, res) => {
//     gfs.files.find({ "metadata.customer": req.params.id }).toArray((err, files) => {
//         // Check if files
//         if (!files || files.length === 0) {
//             res.json([]);
//         } else {
//             // files.map(file => {
//             //     if (file.contentType === 'image/jpeg' || file.contentType === 'image/png') {
//             //         file.isImage = true;
//             //     } else {
//             //         file.isImage = false;
//             //     }
//             // });
//             //console.log(files);
//             res.json(files);
//         }
//     });
// });

// // @route POST /uploads/:id
// // @desc Updates all files for a given customer if they changed their name.
// app.post('/uploads/:id', authenticate_session, (req, res) => {
//     let updated = { success: true };
//     gfs.files.find({ "metadata.customer": req.params.id }).toArray((err, files) => {
//         if (req.body && req.body.new_name) {
//             files.forEach(file => {
//                 //console.log(file);
//                 gfs.files.update({ _id: file._id }, {
//                     $set: { "metadata.customer": req.body.new_name }
//                 }).catch(error => {
//                     console.log("Failed changing customer name.");
//                     updated.success = false;
//                 });
//             });
//         } else {
//             console.log("No new customer name to change to.");
//             updated.success = false;
//             res.status(500).json(updated.toString());
//         }
//         res.status(200).json(updated);
//     });
// });


// // @route POST /upload
// // @desc  Uploads file to DB
// app.post('/uploads', authenticate_session, upload.single('file'), (req, res) => {
//     res.redirect(req.headers.referer);
// });


// // @route GET /files
// // @desc  Display all files in JSON
// app.get('/files', authenticate_session, (req, res) => {
//     gfs.files.find().toArray((err, files) => {
//         // Check if files
//         if (!files || files.length === 0) {
//             return res.render('uploads', { files: false });
//         }

//         // Files exist
//         return res.render('uploads', { files: files });
//     });
// });

// // @route GET /files/:filename
// // @desc  Downloads the file
// app.get('/files/:filename', authenticate_session, (req, res) => {
//     gfs.files.findOne({ filename: req.params.filename }, (err, file) => {
//         if (err) {
//             res.status(404).send("Error in retrieving file.");
//         }
//         // Check if file
//         if (!file || file.length === 0) {
//             return res.status(404).json({
//                 err: 'No such file.'
//             });
//         }

//         // File exists
//         //return res.json(file);

//         res.setHeader('Content-disposition', 'attachment; filename=' + file.filename);
//         res.setHeader('Content-type', file.contentType);

//         const readstream = gfs.createReadStream(file.filename);
//         readstream.pipe(res);
//     });
// });

// // @route DELETE /files/:id
// // @desc  Delete file
// app.delete('/files/:id', (req, res) => {
//     console.log('delete reached')
//     console.log(`'${req.params.id}'`);
//     if (req.body.delete_customer) {
//         console.log('Wiping customer ' + req.params.id)
//         gfs.files.find({ "metadata.customer": req.params.id }).toArray((err, files) => {
//             files.forEach(file => {
//                 gfs.remove({ _id: file._id, root: 'uploads' }, (err, gridStore) => {
//                     if (err) {
//                         //console.log(err);
//                         return res.status(404).json({ err: err });
//                     }
//                     //res.redirect('/customerprofile/files/');
//                 });
//             });
//             res.status(200).json("{}");
//         });
//     } else {
//         gfs.remove({ _id: req.params.id, root: 'uploads' }, (err, gridStore) => {
//             if (err) {
//                 //console.log(err);
//                 return res.status(404).json({ err: err });
//             }
//             //res.redirect('/customerprofile/files/');
//             res.status(200).json("{}");
//         });
//     }
// });
///////////////////////////////////////////////////////////////////////////////////////////////////////