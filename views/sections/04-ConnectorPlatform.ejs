<!-- Displaying connector platform questions -->
<!-- Do not format this file in Visual Studio Code, will bork page. -->

<!-- The custom style is needed for the autocomplete text box -->


<div class="container-fluid">
	<div class="row">
		<div class="col-md-12 mt-2 p-1 m-auto">
      <div id="alertDIV">
      </div>
    </div>
	</div>
	<div class="row p-2">
		<div class="col-xl-12 p-1 m-auto" style="background-color:rgb(255, 255, 255);">
			<div class="card h-100">
				<div class="card-header">
					<h4 class="mb-0">Add</h4>
				</div>
				<div class="card-body p-1">
					<table class="table table-borderless">
						<tr>
							<form id="frmAddConnector" autocomplete="off" action="javascript:addConnector()" enctype="multipart/form-data"/>
							<tr>
								<td>
									<div class="autocomplete" style="width:300px;">
                    <input id="addConnectorType" type="text" name="addConnectorType" placeholder="Connector Type">
                  </div>
                  

									</td>
									<td>
										<input type="number" min="0" type="text" placeholder="Total Users" id="addConnectorUsers" >
										</td>
										<td>
											<input type="number" min="0" type="text" placeholder="Licenced Users" id="addConnectorLicences" >
											</td>
											<td>
												<input type="number" min="0" type="text" placeholder="Messages Per day" id="addConnectorMessagesPerDay" >
												</td>
												<td>
													<button type="submit" min="0" id="btnAddConnector" type="button" class="btn btn-primary btn-block">Add</button>
												</td>
											</form>
										</tr>
									</table>
								</div>
							</div>
						</div>
					</div>
					<div class="row p-2">
						<div class="col-xl-12 p-1 m-auto" style="background-color:rgb(255, 255, 255);">
							<div class="card h-100">
								<div class="card-header">
									<h4 class="mb-0">Connectors</h4>
								</div>
								<div class="card-body p-0">
									<table class="table table-hover" id="tblConnectorList">
										<thead class="thead-light">
											<tr>
												<th>Type</th>
												<th>Total Users</th>
												<th>Licenced Users</th>
												<th>Daily Messages</th>
												<th>Action</th>
											</tr>
										</thead>
										<tbody id="tblBodyConnector">
										</tbody>
									</table>
									<input type="hidden" id="customername" name="customername" value="<%= locals.result.customer.name %>"/>
								</div>
							</div>
						</div>
					</div>
				</div>



<script>

    const connectorList = ["Bloomberg", "Box", "Chatter", "Facebook", "Files", "Google", "Jive", "LinkedIn", "Lync", "OneDrive", "Sharepoint", "Skype for Business", "Skype On-Prem", "Slack", "Symphony", "Teams", "Twitter", "Yammer", "YouTube", "Zoom"]

    // Handle the Alert Close Button Event
    $(function() {
        $('#close').on('click', function() {
            $('#theAlert').addClass('invisible')
        })
    })

    function createAlert(alertType, textValue) {
          newAlert = document.createElement("DIV")
          newAlert.setAttribute("id", "theAlert")
          newAlert.setAttribute("class", "alert " + alertType +  " alert-dismissible fade show")
          alertCloseButton = document.createElement("BUTTON")
          alertCloseButton.setAttribute("type", "button")
          alertCloseButton.setAttribute("class", "close")
          alertCloseButton.setAttribute("id", "close")
          alertCloseButton.setAttribute("data-dismiss", "alert")
          alertCloseSpan = document.createElement("i")
          alertCloseSpan.setAttribute("class", "fa fa-window-close")
          alertCloseSpan.setAttribute("aria-hidden", "true")
          alertCloseButton.appendChild(alertCloseSpan)
          newAlert.appendChild(alertCloseButton)
          alertText = document.createElement("P")
          alertText.setAttribute("id", "alertText")
          alertText.appendChild(document.createTextNode(textValue))
          newAlert.appendChild(alertText)
          document.getElementById("alertDIV").appendChild(newAlert)
    }


    // ============================================================
    // Add Connector
    // =============================================================
    function addConnector() {
      
        // If alert is visible, then hide it and process the form.
        $('#theAlert').addClass('invisible');

        var addType = document.getElementById('addConnectorType')
        var addUsers = document.getElementById('addConnectorUsers')
        var addLicences = document.getElementById('addConnectorLicences')
        var addMessages = document.getElementById('addConnectorMessagesPerDay')
        var showAlert = document.getElementById('theAlert')

        // Check if Connector Type is empty
        if (addType.value == "") {
          createAlert("alert-danger", "Choose a Connector Type.")
          return           
        }

        
        var unknownConnector = true
        // Check if the typed value matches an item in "connectorList"
        for(i = 0; i < connectorList.length; i++) {
          currentVal = connectorList[i].toLowerCase()
          typedVal = addType.value.toLowerCase()
          if (currentVal == typedVal)
          {
            addType.value = connectorList[i]
            unknownConnector = false
          }
        }

        // If the user typed an unknownConnector name, then display a warning
        if (unknownConnector) {
          alerttext = "Warning! " + addType.value + " does not match an existing connector type."
            createAlert("alert-warning", alerttext)
        }

        // Check for licences
        numberOfUsers = parseFloat(addUsers.value)
        numberOfLicences = parseFloat(addLicences.value)
        if (numberOfUsers > numberOfLicences) {
          alerttext = "Warning! You need more licences for the " + addType.value + " connector."
          createAlert("alert-warning", alerttext)
        }

       
        var form = document.getElementById('frmAddConnector')
        var formData = new FormData(form)
        var customerName = $('#customername').val()
        var addConnectorType = $('#addConnectorType').val()
        $('#addConnectorType').val("")
        var addConnectorUsers = $('#addConnectorUsers').val()
        $('#addConnectorUsers').val("")
        var addConnectorLicences = $('#addConnectorLicences').val()
        $('#addConnectorLicences').val("")
        var addConnectorMessagesPerDay = $('#addConnectorMessagesPerDay').val()
        $('#addConnectorMessagesPerDay').val("")

        // Create a new Connector object
        var newConnector = {
            type: addConnectorType,
            users: addConnectorUsers,
            licences: addConnectorLicences,
            dailymessages: addConnectorMessagesPerDay
        }

        // Send the Connector object to the backend API 
        $.ajax({
            type: 'POST',
            url: '/addConnector/'+ customerName,
            data: newConnector,
            success: function(newItem) {
                var newRow = '<tr>'
                newRow += '<td><p class="font-weight-bold">' + addConnectorType + '</p></td>'
                newRow += '<td><p>' + addConnectorUsers + '</p></td>'
                newRow += '<td><p>' + addConnectorLicences + '</p></td>'
                newRow += '<td><p>' + addConnectorMessagesPerDay + '</p></td>'
                newRow += '<td><button type="button" id="' + newItem + '" class="btn btn-sm btn-danger btn-block btn-delete-connector">Delete</button></td>'
                newRow += '</tr>'
                $("tbody#tblBodyConnector").append(newRow)                
            }
        })

    }


    // ==================================================
    // Delete Connector
    // ==================================================
    $(document).on('click', '.btn-delete-connector', function(){ 
        // delConfirm = confirm("Delete Connector?");
        delConfirm = true
        if(delConfirm) {
            delData = {
                "delConnectorID": this.id,
                "customer": $('#customername').val()
            }

            $.ajax({
                type: 'POST',
                url: '/delConnector/' + $('#customername').val(),
                data: delData,
                success: function(data) { 
                    //alert(data)
                    
                },
                error: function(err) { 
                    alert(err.statusText)
                }
            })
            jQuery(this).parent().parent().remove()
        }
    });


   
   
    $(document).ready(function(){


        // ==================================================
        // Load All Connectors
        // ==================================================
        $.ajax({
            type: 'GET',
            url: '/getConnectors/' + $('#customername').val(),
            success: function(data) {
                $.each(data, function(i, item){
                    var newRow = '<tr>'
                        newRow += '<td><p class="font-weight-bold">' + item.type + '</p></td>'
                        newRow += '<td><p>' + item.users + '</p></td>'
                        newRow += '<td><p>' + item.licences + '</p></td>'
                        newRow += '<td><p>' + item.dailymessages + '</p></td>'
                    newRow += '<td><button type="button" id="' + item.id + '" class="btn btn-sm btn-danger btn-block btn-delete-connector">Delete</button></td>'
                    newRow += '</tr>'
                    $("tbody#tblBodyConnector").append(newRow)
                })
            },
            error: function() {
                alert('Error loading connectors list')
            }
        })
     })

 

    // ==================================================
    // Code for Autocomplete
    // https://www.w3schools.com/howto/howto_js_autocomplete.asp
    // ==================================================
    function autocomplete(inp, arr) {
    /*the autocomplete function takes two arguments,
    the text field element and an array of possible autocompleted values:*/
    var currentFocus;


    // handle the click event on the "Connector Type" input box
    inp.addEventListener("click", function(e) {
      var a, b, i
      /*close any already open lists of autocompleted values*/
      closeAllLists();
      
      currentFocus = -1;
      
      // Create the drop down list
      dropDownList = document.createElement("DIV");
      dropDownList.setAttribute("id", this.id + "autocomplete-list");
      dropDownList.setAttribute("class", "autocomplete-items");

      // Populate the drop down list with items
      for (i = 0; i < arr.length; i++) {
        listItem = document.createElement("DIV");
        listItem.innerHTML = '<P class="autocomplete-item">' + arr[i] + '</P>';
        listItem.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
        // Add an event listner to each item in the list
        listItem.addEventListener("click", function(e) {
                /*insert the value for the autocomplete text field:*/
                inp.value = this.getElementsByTagName("input")[0].value;
                /*close the list of autocompleted values,
                (or any other open lists of autocompleted values:*/
                closeAllLists();
            });
        // Add the list item to the list
        dropDownList.appendChild(listItem)
      }
      // Add the list to the parent
      this.parentNode.appendChild(dropDownList);
  });



    /*execute a function when someone writes in the text field:*/
    inp.addEventListener("input", function(e) {
        var a, b, i, val = this.value;
        /*close any already open lists of autocompleted values*/
        closeAllLists();
        if (!val) { return false;}
        currentFocus = -1;
        /*create a DIV element that will contain the items (values):*/
        a = document.createElement("DIV");
        a.setAttribute("id", this.id + "autocomplete-list");
        a.setAttribute("class", "autocomplete-items");
        /*append the DIV element as a child of the autocomplete container:*/
        this.parentNode.appendChild(a);
        
        for (i = 0; i < arr.length; i++) {

          /*check if the item starts with the same letters as the text field value:*/
          if (arr[i].substr(0, val.length).toUpperCase() == val.toUpperCase()) {
            
            /*create a DIV element for each matching element:*/
            b = document.createElement("DIV");
            /*make the matching letters bold:*/
            b.innerHTML = "<strong>" + arr[i].substr(0, val.length) + "</strong>";
            b.innerHTML += arr[i].substr(val.length);
            /*insert a input field that will hold the current array item's value:*/
            b.innerHTML += "<input type='hidden' value='" + arr[i] + "'>";
            /*execute a function when someone clicks on the item value (DIV element):*/
                b.addEventListener("click", function(e) {
                /*insert the value for the autocomplete text field:*/
                inp.value = this.getElementsByTagName("input")[0].value;
                /*close the list of autocompleted values,
                (or any other open lists of autocompleted values:*/
                closeAllLists();
            });
            a.appendChild(b);
          }
        }
  });



  /*execute a function presses a key on the keyboard:*/
  inp.addEventListener("keydown", function(e) {
      var x = document.getElementById(this.id + "autocomplete-list");
      if (x) x = x.getElementsByTagName("div");
      if (e.keyCode == 40) {
        /*If the arrow DOWN key is pressed,
        increase the currentFocus variable:*/
        currentFocus++;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 38) { //up
        /*If the arrow UP key is pressed,
        decrease the currentFocus variable:*/
        currentFocus--;
        /*and and make the current item more visible:*/
        addActive(x);
      } else if (e.keyCode == 13) {
        /*If the ENTER key is pressed, prevent the form from being submitted,*/
        e.preventDefault();
        if (currentFocus > -1) {
          /*and simulate a click on the "active" item:*/
          if (x) x[currentFocus].click();
        }
      }
  });
  function addActive(x) {
    /*a function to classify an item as "active":*/
    if (!x) return false;
    /*start by removing the "active" class on all items:*/
    removeActive(x);
    if (currentFocus >= x.length) currentFocus = 0;
    if (currentFocus < 0) currentFocus = (x.length - 1);
    /*add class "autocomplete-active":*/
    x[currentFocus].classList.add("autocomplete-active");
  }
  function removeActive(x) {
    /*a function to remove the "active" class from all autocomplete items:*/
    for (var i = 0; i < x.length; i++) {
      x[i].classList.remove("autocomplete-active");
    }
  }
  function closeAllLists(elmnt) {
    /*close all autocomplete lists in the document,
    except the one passed as an argument:*/
    var x = document.getElementsByClassName("autocomplete-items");
    for (var i = 0; i < x.length; i++) {
      if (elmnt != x[i] && elmnt != inp) {
        x[i].parentNode.removeChild(x[i]);
      }
    }
  }
  /*execute a function when someone clicks in the document:*/
  document.addEventListener("click", function (e) {
      closeAllLists(e.target);
  });
}

autocomplete(document.getElementById("addConnectorType"), connectorList);


   
</script>